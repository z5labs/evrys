// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: svc-event-log/eventlogpb/eventlogpb.proto

package eventlogpb

import (
	context "context"
	pb "github.com/cloudevents/sdk-go/binding/format/protobuf/v2/pb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventLogClient is the client API for EventLog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventLogClient interface {
	// Append will append a new event to the log.
	Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Iterate will iterate over the event log.
	Iterate(ctx context.Context, in *IterateRequest, opts ...grpc.CallOption) (EventLog_IterateClient, error)
}

type eventLogClient struct {
	cc grpc.ClientConnInterface
}

func NewEventLogClient(cc grpc.ClientConnInterface) EventLogClient {
	return &eventLogClient{cc}
}

func (c *eventLogClient) Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/eventlogpb.EventLog/Append", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventLogClient) Iterate(ctx context.Context, in *IterateRequest, opts ...grpc.CallOption) (EventLog_IterateClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventLog_ServiceDesc.Streams[0], "/eventlogpb.EventLog/Iterate", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventLogIterateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventLog_IterateClient interface {
	Recv() (*pb.CloudEvent, error)
	grpc.ClientStream
}

type eventLogIterateClient struct {
	grpc.ClientStream
}

func (x *eventLogIterateClient) Recv() (*pb.CloudEvent, error) {
	m := new(pb.CloudEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventLogServer is the server API for EventLog service.
// All implementations must embed UnimplementedEventLogServer
// for forward compatibility
type EventLogServer interface {
	// Append will append a new event to the log.
	Append(context.Context, *AppendRequest) (*emptypb.Empty, error)
	// Iterate will iterate over the event log.
	Iterate(*IterateRequest, EventLog_IterateServer) error
	mustEmbedUnimplementedEventLogServer()
}

// UnimplementedEventLogServer must be embedded to have forward compatible implementations.
type UnimplementedEventLogServer struct {
}

func (UnimplementedEventLogServer) Append(context.Context, *AppendRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Append not implemented")
}
func (UnimplementedEventLogServer) Iterate(*IterateRequest, EventLog_IterateServer) error {
	return status.Errorf(codes.Unimplemented, "method Iterate not implemented")
}
func (UnimplementedEventLogServer) mustEmbedUnimplementedEventLogServer() {}

// UnsafeEventLogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventLogServer will
// result in compilation errors.
type UnsafeEventLogServer interface {
	mustEmbedUnimplementedEventLogServer()
}

func RegisterEventLogServer(s grpc.ServiceRegistrar, srv EventLogServer) {
	s.RegisterService(&EventLog_ServiceDesc, srv)
}

func _EventLog_Append_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventLogServer).Append(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventlogpb.EventLog/Append",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventLogServer).Append(ctx, req.(*AppendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventLog_Iterate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IterateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventLogServer).Iterate(m, &eventLogIterateServer{stream})
}

type EventLog_IterateServer interface {
	Send(*pb.CloudEvent) error
	grpc.ServerStream
}

type eventLogIterateServer struct {
	grpc.ServerStream
}

func (x *eventLogIterateServer) Send(m *pb.CloudEvent) error {
	return x.ServerStream.SendMsg(m)
}

// EventLog_ServiceDesc is the grpc.ServiceDesc for EventLog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventLog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eventlogpb.EventLog",
	HandlerType: (*EventLogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Append",
			Handler:    _EventLog_Append_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Iterate",
			Handler:       _EventLog_Iterate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "svc-event-log/eventlogpb/eventlogpb.proto",
}
